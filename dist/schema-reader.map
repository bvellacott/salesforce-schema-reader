{"version":3,"sources":["./browserHeader.js","./schema-reader.js","./browserFooter.js"],"sourcesContent":["var module = {};\nvar exports = {};","// http://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nvar clone = function clone(obj) {\n\tif (null == obj || \"object\" != typeof obj) return obj;\n\tvar copy = obj.constructor();\n\tfor (var attr in obj) {\n\t\tif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n\t}\n\treturn copy;\n};\n\n// Requires a salesforce connection object, unless the metadata is passed directly\n// to the reader.\n// Leave onSuccess out if you don't want to populate metadata on construction\nvar SchemaReader = function SchemaReader(connection, batchSize, onSuccess, onFailure, objNames) {\n\tthis.type = 'SchemaReader';\n\tthis.connection = connection;\n\tthis.isFetching = true;\n\tthis.batchSize = typeof batchSize == 'undefined' ? 100 : batchSize;\n\tthis.skipErrors = typeof onFailure == 'undefined' ? true : false;\n\tthis.readRelWithUdefNames = false;\n\n\tif (typeof onSuccess === 'function') this.populate(onSuccess, onFailure, objNames);\n};\n\nSchemaReader.prototype = {\n\tpopulate: function populate(onSuccess, onFailure, objNames) {\n\t\tthis.isFetching = true;\n\t\tthis.preMetas = [];\n\t\tthis.completeMetas = {};\n\t\tthis.nameBatches = [];\n\n\t\tvar threadCount = 0;\n\t\tif (!objNames) {\n\t\t\tvar res = this.connection.describeGlobal();\n\t\t\tthis.preMetas = res.getArray(\"sobjects\");\n\t\t} else this.preMetas = objNames;\n\n\t\t// Push batches\n\t\tfor (var i = 0; i < this.preMetas.length;) {\n\t\t\tvar batch = [];\n\t\t\tfor (var j = 0; i < this.preMetas.length && j < this.batchSize; i++, j++) batch.push(this.preMetas[i].name);\n\t\t\tthis.nameBatches.push(batch);\n\t\t}\n\n\t\tvar failed = false;\n\t\tvar handledFailure = false;\n\t\tvar that = this;\n\t\tvar cb = function cb(err) {\n\t\t\tif (handledFailure) return;\n\t\t\tif (failed) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tonFailure(err);\n\t\t\t\thandledFailure = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthreadCount--;\n\t\t\tconsole.log(threadCount);\n\t\t\tif (threadCount <= 0) {\n\t\t\t\tthat.isFetching = false;\n\t\t\t\tonSuccess();\n\t\t\t}\n\t\t};\n\t\tvar fail = function fail(err) {\n\t\t\tif (!that.skipErrors) {\n\t\t\t\tfailed = true;\n\t\t\t\tonFailure(err);\n\t\t\t} else console.log(err); // Currently only logging the error\n\t\t\tcb(err);\n\t\t};\n\n\t\t// Get complete metas\n\t\tfor (var i = 0; i < this.nameBatches.length; i++) {\n\t\t\tthreadCount++;\n\t\t\tconsole.log('Batch : ' + this.nameBatches[i]);\n\t\t\tthis.fetchCompleteMeta(this.nameBatches[i], cb, fail);\n\t\t}\n\t},\n\t// Read the array of pre metas and populate completeMetas\n\tfetchCompleteMeta: function fetchCompleteMeta(objs, success, fail) {\n\t\tvar that = this;\n\t\tvar fetchSuccess = function fetchSuccess(metas) {\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < metas.length; i++) that.registerMeta(metas[i]);\n\t\t\t} catch (e) {\n\t\t\t\tfail(e);\n\t\t\t} finally {\n\t\t\t\tsuccess();\n\t\t\t} // call the callback\n\t\t};\n\t\tthis.connection.describeSObjects(objs, fetchSuccess, fail);\n\t},\n\tregisterMeta: function registerMeta(obj) {\n\t\tthis.completeMetas[obj.name] = obj;\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadFields: function shallowReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFields: function shallowReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.fields === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\t// subPath.push(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read beginning with the passed object\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFieldsAbr: function shallowReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaFields(obj, {}, [], visitor);\n\t},\n\t// visitor definition: function(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// field : {} - the field description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions and ending with a field description\n\t// reader : the reader which is currently used to read the schema\n\tdeepReadFields: function deepReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFields: function deepReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.fields === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (f.type === 'reference') {\n\t\t\t\tif (!Array.isArray(f.referenceTo)) {\n\t\t\t\t\tif (this.deepReadMetaFields(this.completeMetas[f.referenceTo], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < f.referenceTo.length; j++) if (this.deepReadMetaFields(this.completeMetas[f.referenceTo[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFieldsAbr: function deepReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaFields(obj, [], [], visitor);\n\t},\n\t// visitor definition: function(rel, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// rel : {} - the relationship description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions\n\t// reader : the reader which is currently used to read the schema\n\tshallowReadChildRelationships: function shallowReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationships: function shallowReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.childRelationships === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read starting with the passed object\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationshipsAbr: function shallowReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\t// see shallowReadChildRelationships for the visitor definition\n\tdeepReadChildRelationships: function deepReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationships: function deepReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.childRelationships === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (!Array.isArray(r.childSObject)) {\n\t\t\t\tif (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t} else {\n\t\t\t\tfor (var j = 0; j < r.childSObject.length; j++) if (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationshipsAbr: function deepReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\tvalidateState: function validateState() {\n\t\tif (this.isFetching) throw this.type + \" hasn't finished fetching metadata from the server\";\n\t}\n\n};\n\n// filters\nSchemaReader.createFilterVisitor = function (filter, visitor) {\n\treturn function (field, object, path, reader) {\n\t\tif (filter(field, object, path, reader)) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newObjectNameFilter = function (objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldNameFilter = function (fieldName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldAndObjectNameFilter = function (fieldName, objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif ((!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) && (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name)) visitor(field, object, path, reader);\n\t};\n};\n\n// miscalleneous\nSchemaReader.concatPath = function (path) {\n\tvar str = '';\n\tfor (var i = 0; i < path.length; i++) str += (i > 0 ? '.' : '') + (path[i].name ? path[i].name : path[i].relationshipName);\n\treturn str;\n};\n\nexports['default'] = SchemaReader;\nmodule.exports = exports['default'];","window.SchemaReader = SchemaReader;"],"names":[],"mappingsrQA;;","file":"schema-reader.js"}