{"version":3,"sources":["browserHeader.js","schema-reader.js","browserFooter.js"],"names":["module","Object","defineProperty","exports","value","SchemaReader","connection","batchSize","onSuccess","onFailure","undefined","type","isFetching","skipErrors","readRelWithUdefNames","populate","prototype","this","preMetas","completeMetas","nameBatches","threadCount","res","describeGlobal","getArray","i","length","batch","j","push","name","failed","handledFailure","that","cb","err","console","log","fail","fetchCompleteMeta","objs","success","fetchSuccess","metas","registerMeta","e","describeSObjects","obj","shallowReadFields","visitor","validateState","objName","shallowReadMetaFieldsAbr","shallowReadMetaFields","visited","path","fields","f","subPath","slice","visit","deepReadFields","deepReadMetaFieldsAbr","deepReadMetaFields","t","referenceTo","childRelationships","rel","relationshipName","childSObject","shallowReadChildRelationships","shallowReadMetaChildRelationshipsAbr","shallowReadMetaChildRelationships","r","window"],"mappings":"YAAA,GAAAA,UCKAC,QAAAC,eAAAC,EAAA,cACAC,OAAA,GAEA,IAAAC,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,IACAC,QAAAC,KAAA,gBACAD,QAAAJ,WAAAA,GACAI,QAAAE,YAAA,GACAF,QAAAH,UAAA,mBAAAA,GAAA,IAAAA,GACAG,QAAAG,WAAA,mBAAAJ,IACAC,QAAAI,sBAAA,EAEA,kBAAAN,KAAAE,QAAAK,SAAAP,EAAAC,GAGAJ,GAAAW,WACAD,SAAA,SAAAP,EAAAC,GACAQ,KAAAC,YACAD,KAAAE,iBACAF,KAAAG,cAEA,IAAAC,GAAA,EACAC,EAAAL,KAAAX,WAAAiB,gBACAN,MAAAC,SAAAI,EAAAE,SAAA,WAGA,KAAA,GAAAC,GAAA,EAAAA,EAAAR,KAAAC,SAAAQ,QAAA,CAEA,IAAA,GADAC,MACAC,EAAA,EAAAH,EAAAR,KAAAC,SAAAQ,QAAAE,EAAAX,KAAAV,UAAAkB,IAAAG,IAAAD,EAAAE,KAAAZ,KAAAC,SAAAO,GAAAK,KACAb,MAAAG,YAAAS,KAAAF,GA8BA,IAAA,GA3BAI,IAAA,EACAC,GAAA,EACAC,EAAAhB,KACAiB,EAAA,SAAAC,GACA,IAAAH,EAAA,CACA,GAAAD,EAIA,MAHAK,SAAAC,IAAAF,GACA1B,EAAA0B,QACAH,GAAA,EAGAX,KACAe,QAAAC,IAAAhB,GACAA,GAAA,IACAY,EAAArB,YAAA,EACAJ,OAGA8B,EAAA,SAAAH,GACAF,EAAApB,WAGAuB,QAAAC,IAAAF,IAFAJ,GAAA,EACAtB,EAAA0B,IAEAD,EAAAC,IAIAV,EAAA,EAAAA,EAAAR,KAAAG,YAAAM,OAAAD,IACAW,QAAAC,IAAA,WAAApB,KAAAG,YAAAK,IACAJ,IACAJ,KAAAsB,kBAAAtB,KAAAG,YAAAK,GAAAS,EAAAI,IAIAC,kBAAA,SAAAC,EAAAC,EAAAH,GACA,GAAAL,GAAAhB,KACAyB,EAAA,SAAAC,GACA,IACA,IAAA,GAAAlB,GAAA,EAAAA,EAAAkB,EAAAjB,OAAAD,IAAAQ,EAAAW,aAAAD,EAAAlB,IACA,MAAAoB,GACAP,EAAAO,GACA,QACAJ,KAGAxB,MAAAX,WAAAwC,iBAAAN,EAAAE,EAAAJ,IAEAM,aAAA,SAAAG,GACA9B,KAAAE,cAAA4B,EAAAjB,MAAAiB,GAGAC,kBAAA,SAAAC,GACAhC,KAAAiC,eACA,KAAA,GAAAC,KAAAlC,MAAAE,cAAA,GAAA,SAAAF,KAAAmC,yBAAAnC,KAAAE,cAAAgC,GAAAF,GAAA,MAAA,QAGAI,sBAAA,SAAAN,EAAAO,EAAAC,EAAAN,GAEA,GADAhC,KAAAiC,gBACA,mBAAAH,GAAAS,OAEA,WADApB,SAAAC,IAAA,mCAGA,KAAA,GAAAZ,GAAA,EAAAA,EAAAsB,EAAAS,OAAA9B,OAAAD,IAAA,CACA,GAAAgC,GAAAV,EAAAS,OAAA/B,EACA,IAAA,mBAAAgC,GAAA,CACA,GAAAC,GAAAH,EAAAI,MAAA,EAEA,IADAD,EAAA7B,KAAA4B,GACA,SAAAR,EAAAW,MAAAH,EAAAV,EAAAW,EAAAzC,MAAA,MAAA,UAKAmC,yBAAA,SAAAL,EAAAE,GACA,GAAAK,KAEA,OADAA,GAAAP,EAAAjB,OAAA,EACAb,KAAAoC,sBAAAN,EAAAO,GAAAP,GAAAE,IAUAY,eAAA,SAAAZ,GACAhC,KAAAiC,eACA,KAAA,GAAAC,KAAAlC,MAAAE,cAAA,GAAA,SAAAF,KAAA6C,sBAAA7C,KAAAE,cAAAgC,GAAAF,GAAA,MAAA,QAGAc,mBAAA,SAAAhB,EAAAO,EAAAC,EAAAN,GAEA,GADAhC,KAAAiC,gBACA,GAAAI,EAAAP,EAAAjB,OACA,mBAAAiB,GAAAS,OAAA,CACAF,EAAAP,EAAAjB,OAAA,EAEA,GAAAyB,EAAA7B,QAAA6B,EAAA1B,KAAAkB,EAEA,KAAA,GAAAtB,GAAA,EAAAA,EAAAsB,EAAAS,OAAA9B,OAAAD,IAAA,CACA,GAAAgC,GAAAV,EAAAS,OAAA/B,EACA,IAAA,mBAAAgC,GAAA,CACA,GAAAC,GAAAH,EAAAI,MAAA,EAEA,IADAD,EAAA7B,KAAA4B,GACA,SAAAR,EAAAW,MAAAH,EAAAV,EAAAW,EAAAzC,MAAA,MAAA,MACA,IAAA,cAAA+C,EAAArD,MAAA,SAAAM,KAAA8C,mBAAA9C,KAAAE,cAAAsC,EAAAQ,aAAAX,EAAAI,EAAAT,GAAA,MAAA,QAEA,GAAA,mBAAAF,GAAAmB,mBACA,IAAA,GAAAzC,GAAA,EAAAA,EAAAsB,EAAAmB,mBAAAxC,OAAAD,IAAA,CACA,GAAA0C,GAAApB,EAAAmB,mBAAAzC,EACA,IAAAR,KAAAH,sBAAA,mBAAAqD,GAAAC,iBAAA,CACA,GAAAV,GAAAH,EAAAI,MAAA,EAEA,IADAD,EAAA7B,KAAAsC,GACA,SAAAlD,KAAA8C,mBAAA9C,KAAAE,cAAAgD,EAAAE,cAAAf,EAAAI,EAAAT,GAAA,MAAA,WAKAa,sBAAA,SAAAf,EAAAE,GACA,MAAAhC,MAAA8C,mBAAAhB,QAAAE,IAUAqB,8BAAA,SAAArB,GACAhC,KAAAiC,eACA,KAAA,GAAAC,KAAAlC,MAAAE,cAAA,GAAA,SAAAF,KAAAsD,qCAAAtD,KAAAE,cAAAgC,GAAAF,GAAA,MAAA,QAGAuB,kCAAA,SAAAzB,EAAAO,EAAAC,EAAAN,GAEA,GADAhC,KAAAiC,gBACA,mBAAAH,GAAAmB,mBAEA,WADA9B,SAAAC,IAAA,gDAGA,KAAA,GAAAZ,GAAA,EAAAA,EAAAsB,EAAAmB,mBAAAxC,OAAAD,IAAA,CACA,GAAAgD,GAAA1B,EAAAmB,mBAAAzC,EACA,IAAA,mBAAAgD,GAAA,CACA,GAAAf,GAAAH,EAAAI,MAAA,EAEA,IADAD,EAAA7B,KAAA4C,GACA,SAAAxB,EAAAW,MAAAa,EAAA1B,EAAAW,EAAAzC,MAAA,MAAA,UAKAsD,qCAAA,SAAAxB,EAAAE,GACA,GAAAK,KAEA,OADAA,GAAAP,EAAAjB,OAAA,EACAb,KAAAuD,kCAAAzB,EAAAO,GAAAP,GAAAE,IAEAC,cAAA,WACA,GAAAjC,KAAAL,WAAA,KAAAK,MAAAN,KAAA,uDAIAR,EAAA,QAAAE,sBCnMAqE,OAAArE,aAAAA","file":"schema-reader-min.js","sourcesContent":["var module = {};\nvar exports = {};","// Requires a salesforce connection object, unless the metadata is passed directly\n// to the reader.\n// Leave onSuccess out if you don't want to populate metadata on construction\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nvar SchemaReader = function SchemaReader(connection, batchSize, onSuccess, onFailure) {\n\tundefined.type = 'SchemaReader';\n\tundefined.connection = connection;\n\tundefined.isFetching = true;\n\tundefined.batchSize = typeof batchSize == 'undefined' ? 100 : batchSize;\n\tundefined.skipErrors = typeof onFailure == 'undefined' ? true : false;\n\tundefined.readRelWithUdefNames = false;\n\n\tif (typeof onSuccess === 'function') undefined.populate(onSuccess, onFailure);\n};\n\nSchemaReader.prototype = {\n\tpopulate: function populate(onSuccess, onFailure) {\n\t\tthis.preMetas = [];\n\t\tthis.completeMetas = {};\n\t\tthis.nameBatches = [];\n\n\t\tvar threadCount = 0;\n\t\tvar res = this.connection.describeGlobal();\n\t\tthis.preMetas = res.getArray(\"sobjects\");\n\n\t\t// Push batches\n\t\tfor (var i = 0; i < this.preMetas.length;) {\n\t\t\tvar batch = [];\n\t\t\tfor (var j = 0; i < this.preMetas.length && j < this.batchSize; i++, j++) batch.push(this.preMetas[i].name);\n\t\t\tthis.nameBatches.push(batch);\n\t\t}\n\n\t\tvar failed = false;\n\t\tvar handledFailure = false;\n\t\tvar that = this;\n\t\tvar cb = function cb(err) {\n\t\t\tif (handledFailure) return;\n\t\t\tif (failed) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tonFailure(err);\n\t\t\t\thandledFailure = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthreadCount--;\n\t\t\tconsole.log(threadCount);\n\t\t\tif (threadCount <= 0) {\n\t\t\t\tthat.isFetching = false;\n\t\t\t\tonSuccess();\n\t\t\t}\n\t\t};\n\t\tvar fail = function fail(err) {\n\t\t\tif (!that.skipErrors) {\n\t\t\t\tfailed = true;\n\t\t\t\tonFailure(err);\n\t\t\t} else console.log(err); // Currently only logging the error\n\t\t\tcb(err);\n\t\t};\n\n\t\t// Get complete metas\n\t\tfor (var i = 0; i < this.nameBatches.length; i++) {\n\t\t\tconsole.log('Batch : ' + this.nameBatches[i]);\n\t\t\tthreadCount++;\n\t\t\tthis.fetchCompleteMeta(this.nameBatches[i], cb, fail);\n\t\t}\n\t},\n\t// Read the array of pre metas and populate completeMetas\n\tfetchCompleteMeta: function fetchCompleteMeta(objs, success, fail) {\n\t\tvar that = this;\n\t\tvar fetchSuccess = function fetchSuccess(metas) {\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < metas.length; i++) that.registerMeta(metas[i]);\n\t\t\t} catch (e) {\n\t\t\t\tfail(e);\n\t\t\t} finally {\n\t\t\t\tsuccess();\n\t\t\t} // call the callback\n\t\t};\n\t\tthis.connection.describeSObjects(objs, fetchSuccess, fail);\n\t},\n\tregisterMeta: function registerMeta(obj) {\n\t\tthis.completeMetas[obj.name] = obj;\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadFields: function shallowReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFields: function shallowReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.fields === 'undefined') {\n\t\t\tconsole.log('The object has no fields defined');\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.slice(0);\n\t\t\tsubPath.push(f);\n\t\t\tif (visitor.visit(f, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read beginning with the passed object\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFieldsAbr: function shallowReadMetaFieldsAbr(obj, visitor) {\n\t\tvar visited = {};\n\t\tvisited[obj.name] = true;\n\t\treturn this.shallowReadMetaFields(obj, visited, [obj], visitor);\n\t},\n\t// visitor definition: visitor.visit(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// field : {} - the field description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions and ending with a field description\n\t// reader : the reader which is currently used to read the schema\n\tdeepReadFields: function deepReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFields: function deepReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.fields === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.slice(0);\n\t\t\tsubPath.push(f);\n\t\t\tif (visitor.visit(f, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (t.type === 'reference') if (this.deepReadMetaFields(this.completeMetas[f.referenceTo], visited, subPath, visitor) === 'term') return 'term';\n\t\t}\n\t\tif (typeof obj.childRelationships == 'undefined') return;\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar rel = obj.childRelationships[i];\n\t\t\tif (!this.readRelWithUdefNames && typeof rel.relationshipName === 'undefined') continue;\n\t\t\tvar subPath = path.slice(0);\n\t\t\tsubPath.push(rel);\n\t\t\tif (this.deepReadMetaFields(this.completeMetas[rel.childSObject], visited, subPath, visitor) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFieldsAbr: function deepReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaFields(obj, [], [], visitor);\n\t},\n\t// visitor definition: visitor.visit(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// rel : {} - the relationship description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions\n\t// reader : the reader which is currently used to read the schema\n\tshallowReadChildRelationships: function shallowReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationships: function shallowReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.childRelationships === 'undefined') {\n\t\t\tconsole.log('The object has no child relationships defined');\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.slice(0);\n\t\t\tsubPath.push(r);\n\t\t\tif (visitor.visit(r, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read starting with the passed object\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationshipsAbr: function shallowReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\tvar visited = {};\n\t\tvisited[obj.name] = true;\n\t\treturn this.shallowReadMetaChildRelationships(obj, visited, [obj], visitor);\n\t},\n\tvalidateState: function validateState() {\n\t\tif (this.isFetching) throw this.type + \" hasn't finished fetching metadata from the server\";\n\t}\n};\n\nexports['default'] = SchemaReader;\nmodule.exports = exports['default'];","window.SchemaReader = SchemaReader;"]}