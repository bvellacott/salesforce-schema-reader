{"version":3,"sources":["browserHeader.js","schema-reader.js","browserFooter.js"],"names":["module","Object","defineProperty","exports","value","clone","obj","copy","constructor","attr","hasOwnProperty","SchemaReader","connection","batchSize","onSuccess","onFailure","objNames","this","type","isFetching","skipErrors","readRelWithUdefNames","populate","prototype","preMetas","completeMetas","nameBatches","threadCount","res","describeGlobal","getArray","i","length","batch","j","push","name","failed","handledFailure","that","cb","err","console","log","fail","fetchCompleteMeta","objs","success","fetchSuccess","metas","registerMeta","e","describeSObjects","shallowReadFields","visitor","validateState","objName","shallowReadMetaFieldsAbr","shallowReadMetaFields","visited","path","fields","f","subPath","concat","deepReadFields","deepReadMetaFieldsAbr","deepReadMetaFields","Array","isArray","referenceTo","shallowReadChildRelationships","shallowReadMetaChildRelationshipsAbr","shallowReadMetaChildRelationships","childRelationships","r","deepReadChildRelationships","deepReadMetaChildRelationshipsAbr","deepReadMetaChildRelationships","childSObject","createFilterVisitor","filter","field","object","reader","newObjectNameFilter","caseSensitive","toLowerCase","newFieldNameFilter","fieldName","newFieldAndObjectNameFilter","concatPath","str","relationshipName","window"],"mappings":"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","file":"schema-reader-min.js","sourcesContent":["var module = {};\nvar exports = {};","// http://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nvar clone = function clone(obj) {\n\tif (null == obj || \"object\" != typeof obj) return obj;\n\tvar copy = obj.constructor();\n\tfor (var attr in obj) {\n\t\tif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n\t}\n\treturn copy;\n};\n\n// Requires a salesforce connection object, unless the metadata is passed directly\n// to the reader.\n// Leave onSuccess out if you don't want to populate metadata on construction\nvar SchemaReader = function SchemaReader(connection, batchSize, onSuccess, onFailure, objNames) {\n\tthis.type = 'SchemaReader';\n\tthis.connection = connection;\n\tthis.isFetching = true;\n\tthis.batchSize = typeof batchSize == 'undefined' ? 100 : batchSize;\n\tthis.skipErrors = typeof onFailure == 'undefined' ? true : false;\n\tthis.readRelWithUdefNames = false;\n\n\tif (typeof onSuccess === 'function') this.populate(onSuccess, onFailure, objNames);\n};\n\nSchemaReader.prototype = {\n\tpopulate: function populate(onSuccess, onFailure, objNames) {\n\t\tthis.isFetching = true;\n\t\tthis.preMetas = [];\n\t\tthis.completeMetas = {};\n\t\tthis.nameBatches = [];\n\n\t\tvar threadCount = 0;\n\t\tif (!objNames) {\n\t\t\tvar res = this.connection.describeGlobal();\n\t\t\tthis.preMetas = res.getArray(\"sobjects\");\n\t\t} else this.preMetas = objNames;\n\n\t\t// Push batches\n\t\tfor (var i = 0; i < this.preMetas.length;) {\n\t\t\tvar batch = [];\n\t\t\tfor (var j = 0; i < this.preMetas.length && j < this.batchSize; i++, j++) batch.push(this.preMetas[i].name);\n\t\t\tthis.nameBatches.push(batch);\n\t\t}\n\n\t\tvar failed = false;\n\t\tvar handledFailure = false;\n\t\tvar that = this;\n\t\tvar cb = function cb(err) {\n\t\t\tif (handledFailure) return;\n\t\t\tif (failed) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tonFailure(err);\n\t\t\t\thandledFailure = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthreadCount--;\n\t\t\tconsole.log(threadCount);\n\t\t\tif (threadCount <= 0) {\n\t\t\t\tthat.isFetching = false;\n\t\t\t\tonSuccess();\n\t\t\t}\n\t\t};\n\t\tvar fail = function fail(err) {\n\t\t\tif (!that.skipErrors) {\n\t\t\t\tfailed = true;\n\t\t\t\tonFailure(err);\n\t\t\t} else console.log(err); // Currently only logging the error\n\t\t\tcb(err);\n\t\t};\n\n\t\t// Get complete metas\n\t\tfor (var i = 0; i < this.nameBatches.length; i++) {\n\t\t\tthreadCount++;\n\t\t\tconsole.log('Batch : ' + this.nameBatches[i]);\n\t\t\tthis.fetchCompleteMeta(this.nameBatches[i], cb, fail);\n\t\t}\n\t},\n\t// Read the array of pre metas and populate completeMetas\n\tfetchCompleteMeta: function fetchCompleteMeta(objs, success, fail) {\n\t\tvar that = this;\n\t\tvar fetchSuccess = function fetchSuccess(metas) {\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < metas.length; i++) that.registerMeta(metas[i]);\n\t\t\t} catch (e) {\n\t\t\t\tfail(e);\n\t\t\t} finally {\n\t\t\t\tsuccess();\n\t\t\t} // call the callback\n\t\t};\n\t\tthis.connection.describeSObjects(objs, fetchSuccess, fail);\n\t},\n\tregisterMeta: function registerMeta(obj) {\n\t\tthis.completeMetas[obj.name] = obj;\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadFields: function shallowReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFields: function shallowReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.fields === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\t// subPath.push(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read beginning with the passed object\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFieldsAbr: function shallowReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaFields(obj, {}, [], visitor);\n\t},\n\t// visitor definition: function(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// field : {} - the field description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions and ending with a field description\n\t// reader : the reader which is currently used to read the schema\n\tdeepReadFields: function deepReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFields: function deepReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.fields === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (f.type === 'reference') {\n\t\t\t\tif (!Array.isArray(f.referenceTo)) {\n\t\t\t\t\tif (this.deepReadMetaFields(this.completeMetas[f.referenceTo], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < f.referenceTo.length; j++) if (this.deepReadMetaFields(this.completeMetas[f.referenceTo[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFieldsAbr: function deepReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaFields(obj, [], [], visitor);\n\t},\n\t// visitor definition: function(rel, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// rel : {} - the relationship description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions\n\t// reader : the reader which is currently used to read the schema\n\tshallowReadChildRelationships: function shallowReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationships: function shallowReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.childRelationships === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read starting with the passed object\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationshipsAbr: function shallowReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\t// see shallowReadChildRelationships for the visitor definition\n\tdeepReadChildRelationships: function deepReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationships: function deepReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.childRelationships === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (!Array.isArray(r.childSObject)) {\n\t\t\t\tif (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t} else {\n\t\t\t\tfor (var j = 0; j < r.childSObject.length; j++) if (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationshipsAbr: function deepReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\tvalidateState: function validateState() {\n\t\tif (this.isFetching) throw this.type + \" hasn't finished fetching metadata from the server\";\n\t}\n\n};\n\n// filters\nSchemaReader.createFilterVisitor = function (filter, visitor) {\n\treturn function (field, object, path, reader) {\n\t\tif (filter(field, object, path, reader)) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newObjectNameFilter = function (objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldNameFilter = function (fieldName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldAndObjectNameFilter = function (fieldName, objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif ((!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) && (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name)) visitor(field, object, path, reader);\n\t};\n};\n\n// miscalleneous\nSchemaReader.concatPath = function (path) {\n\tvar str = '';\n\tfor (var i = 0; i < path.length; i++) str += (i > 0 ? '.' : '') + (path[i].name ? path[i].name : path[i].relationshipName);\n\treturn str;\n};\n\nexports['default'] = SchemaReader;\nmodule.exports = exports['default'];","window.SchemaReader = SchemaReader;"]}