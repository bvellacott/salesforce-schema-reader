{"version":3,"sources":["browserHeader.js","schema-reader.js","browserFooter.js"],"names":["module","Object","defineProperty","exports","value","clone","obj","copy","constructor","attr","hasOwnProperty","SchemaReader","connection","batchSize","onSuccess","onFailure","objNames","this","type","isFetching","skipErrors","readRelWithUdefNames","populate","prototype","pushBatches","_this","i","preMetas","length","batch","j","push","name","nameBatches","failed","handledFailure","that","cb","err","console","log","threadCount","fail","fetchCompleteMeta","completeMetas","reader","apply","res","describeGlobal","getArray","then","objs","success","fetchSuccess","metas","registerMeta","e","describeSObjects","shallowReadFields","visitor","validateState","objName","shallowReadMetaFieldsAbr","shallowReadMetaFields","visited","path","fields","f","subPath","concat","deepReadFields","deepReadMetaFieldsAbr","deepReadMetaFields","Array","isArray","referenceTo","shallowReadChildRelationships","shallowReadMetaChildRelationshipsAbr","shallowReadMetaChildRelationships","childRelationships","r","deepReadChildRelationships","deepReadMetaChildRelationshipsAbr","deepReadMetaChildRelationships","childSObject","createFilterVisitor","filter","field","object","newObjectNameFilter","caseSensitive","toLowerCase","newFieldNameFilter","fieldName","newFieldAndObjectNameFilter","concatPath","str","relationshipName","window"],"mappings":"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","file":"schema-reader-min.js","sourcesContent":["var module = {};\nvar exports = {};","// http://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nvar clone = function clone(obj) {\n\tif (null == obj || \"object\" != typeof obj) return obj;\n\tvar copy = obj.constructor();\n\tfor (var attr in obj) {\n\t\tif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n\t}\n\treturn copy;\n};\n\n// Requires a salesforce connection object, unless the metadata is passed directly\n// to the reader.\n// Leave onSuccess out if you don't want to populate metadata on construction\nvar SchemaReader = function SchemaReader(connection, batchSize, onSuccess, onFailure, objNames) {\n\tthis.type = 'SchemaReader';\n\tthis.connection = connection;\n\tthis.isFetching = true;\n\tthis.batchSize = typeof batchSize == 'undefined' ? 100 : batchSize;\n\tthis.skipErrors = typeof onFailure == 'undefined' ? true : false;\n\tthis.readRelWithUdefNames = false;\n\n\tif (typeof onSuccess === 'function') this.populate(onSuccess, onFailure, objNames);\n};\n\nSchemaReader.prototype = {\n\tpopulate: function populate(onSuccess, onFailure, objNames) {\n\t\tthis.isFetching = true;\n\t\tthis.preMetas = [];\n\t\tthis.completeMetas = {};\n\t\tthis.nameBatches = [];\n\n\t\tvar threadCount = 0;\n\n\t\tfunction pushBatches() {\n\t\t\tvar _this = this;\n\n\t\t\t// Push batches\n\t\t\tfor (var i = 0; i < this.preMetas.length;) {\n\t\t\t\tvar batch = [];\n\t\t\t\tfor (var j = 0; i < this.preMetas.length && j < this.batchSize; i++, j++) batch.push(this.preMetas[i].name);\n\t\t\t\tthis.nameBatches.push(batch);\n\t\t\t}\n\n\t\t\tvar failed = false;\n\t\t\tvar handledFailure = false;\n\t\t\tvar that = this;\n\t\t\tvar cb = function cb(err) {\n\t\t\t\tif (handledFailure) return;\n\t\t\t\tif (failed) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tonFailure(err);\n\t\t\t\t\thandledFailure = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthreadCount--;\n\t\t\t\tconsole.log(threadCount);\n\t\t\t\tif (threadCount <= 0) {\n\t\t\t\t\tthat.isFetching = false;\n\t\t\t\t\tonSuccess(_this);\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar fail = function fail(err) {\n\t\t\t\tif (!that.skipErrors) {\n\t\t\t\t\tfailed = true;\n\t\t\t\t\tonFailure(err);\n\t\t\t\t} else console.log(err); // Currently only logging the error\n\t\t\t\tcb(err);\n\t\t\t};\n\n\t\t\t// Get complete metas\n\t\t\tfor (var i = 0; i < this.nameBatches.length; i++) {\n\t\t\t\tthreadCount++;\n\t\t\t\tconsole.log('Batch : ' + this.nameBatches[i]);\n\t\t\t\tthis.fetchCompleteMeta(this.nameBatches[i], cb, fail);\n\t\t\t}\n\t\t}\n\n\t\tvar reader = this;\n\t\tif (!objNames) {\n\t\t\tvar res = this.connection.describeGlobal();\n\t\t\tif (typeof res.getArray === 'function') {\n\t\t\t\treader.preMetas = res.getArray(\"sobjects\");\n\t\t\t\tpushBatches.apply(reader);\n\t\t\t} else {\n\t\t\t\tres.then(function (res) {\n\t\t\t\t\treader.preMetas = res.getArray(\"sobjects\");\n\t\t\t\t\tpushBatches.apply(reader);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treader.preMetas = objNames;\n\t\t\tpushBatches.apply(reader);\n\t\t}\n\t},\n\t// Read the array of pre metas and populate completeMetas\n\tfetchCompleteMeta: function fetchCompleteMeta(objs, success, fail) {\n\t\tvar that = this;\n\t\tvar fetchSuccess = function fetchSuccess(metas) {\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < metas.length; i++) that.registerMeta(metas[i]);\n\t\t\t} catch (e) {\n\t\t\t\tfail(e);\n\t\t\t} finally {\n\t\t\t\tsuccess();\n\t\t\t} // call the callback\n\t\t};\n\t\tthis.connection.describeSObjects(objs, fetchSuccess, fail);\n\t},\n\tregisterMeta: function registerMeta(obj) {\n\t\tthis.completeMetas[obj.name] = obj;\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadFields: function shallowReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFields: function shallowReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.fields === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\t// subPath.push(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read beginning with the passed object\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFieldsAbr: function shallowReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaFields(obj, {}, [], visitor);\n\t},\n\t// visitor definition: function(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// field : {} - the field description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions and ending with a field description\n\t// reader : the reader which is currently used to read the schema\n\tdeepReadFields: function deepReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFields: function deepReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.fields === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (f.type === 'reference') {\n\t\t\t\tif (!Array.isArray(f.referenceTo)) {\n\t\t\t\t\tif (this.deepReadMetaFields(this.completeMetas[f.referenceTo], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < f.referenceTo.length; j++) if (this.deepReadMetaFields(this.completeMetas[f.referenceTo[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFieldsAbr: function deepReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaFields(obj, [], [], visitor);\n\t},\n\t// visitor definition: function(rel, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// rel : {} - the relationship description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions\n\t// reader : the reader which is currently used to read the schema\n\tshallowReadChildRelationships: function shallowReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationships: function shallowReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.childRelationships === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read starting with the passed object\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationshipsAbr: function shallowReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\t// see shallowReadChildRelationships for the visitor definition\n\tdeepReadChildRelationships: function deepReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationships: function deepReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.childRelationships === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (!Array.isArray(r.childSObject)) {\n\t\t\t\tif (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t} else {\n\t\t\t\tfor (var j = 0; j < r.childSObject.length; j++) if (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationshipsAbr: function deepReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\tvalidateState: function validateState() {\n\t\tif (this.isFetching) throw this.type + \" hasn't finished fetching metadata from the server\";\n\t}\n\n};\n\n// filters\nSchemaReader.createFilterVisitor = function (filter, visitor) {\n\treturn function (field, object, path, reader) {\n\t\tif (filter(field, object, path, reader)) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newObjectNameFilter = function (objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldNameFilter = function (fieldName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldAndObjectNameFilter = function (fieldName, objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif ((!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) && (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name)) visitor(field, object, path, reader);\n\t};\n};\n\n// miscalleneous\nSchemaReader.concatPath = function (path) {\n\tvar str = '';\n\tfor (var i = 0; i < path.length; i++) str += (i > 0 ? '.' : '') + (path[i].name ? path[i].name : path[i].relationshipName);\n\treturn str;\n};\n\nexports['default'] = SchemaReader;\nmodule.exports = exports['default'];","window.SchemaReader = SchemaReader;"]}