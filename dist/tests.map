{"version":3,"sources":["browserTestHeader.js","./tests.js","browserTestFooter.js"],"sourcesContent":["\"use strict\";\n\nvar _module = {};","'use strict';\n\nmodule.exports = function (test, SchemaReader) {\n\n\t// the schema fixture data\n\tvar schema = {\n\t\twindowObj__c: {\n\t\t\tname: 'windowObj__c',\n\t\t\tfields: [{ name: 'Id', type: 'string', updateable: 'false' }, { name: 'Name', type: 'string', updateable: 'true' }, { name: 'isDoubleGlazed__c', type: 'boolean', updateable: 'true' }, { name: 'parent__c', type: 'reference', updateable: 'true',\n\t\t\t\tcustom: 'true', referenceTo: ['houseObj__c', 'doorObj__c'] }]\n\t\t},\n\t\tdoorObj__c: {\n\t\t\tname: 'doorObj__c',\n\t\t\tfields: [{ name: 'Id', type: 'string', updateable: 'false' }, { name: 'Name', type: 'string', updateable: 'true' }, { name: 'knobType__c', type: 'string', updateable: 'true' }, { name: 'house__c', type: 'reference', updateable: 'true',\n\t\t\t\tcustom: 'true', referenceTo: 'houseObj__c' }],\n\t\t\tchildRelationships: [{ relationshipName: 'windows__r', childSObject: 'windowObj__c', field: 'parent__c' }]\n\t\t},\n\t\thouseObj__c: {\n\t\t\tname: 'houseObj__c',\n\t\t\tfields: [{ name: 'Id', type: 'string', updateable: 'false' }, { name: 'Name', type: 'string', updateable: 'true' }, { name: 'isBigHouse__c', type: 'boolean', updateable: 'false' }, { name: 'housePartyTime__c', type: 'datetime', updateable: 'true' }, { name: 'cost__c', type: 'currency', updateable: 'true' }, { name: 'readyByDate__c', type: 'date', updateable: 'true' }, { name: 'ownerContact__c', type: 'email', updateable: 'false' }, { name: 'height__c', type: 'double', updateable: 'true' }, { name: 'address__c', type: 'location', updateable: 'true' }, { name: 'contactPhone__c', type: 'phone', updateable: 'true' }, { name: 'floorPlan__c', type: 'picklist', updateable: 'true' }, { name: 'insurances__c', type: 'multipicklist', updateable: 'false' }, { name: 'description__c', type: 'textarea', updateable: 'true' }, { name: 'alarmPin__c', type: 'encryptedstring', updateable: 'true' }, { name: 'website__c', type: 'url', updateable: 'true' }, { name: 'floors__c', type: 'double', updateable: 'true' }],\n\t\t\tchildRelationships: [{ relationshipName: 'doors__r', childSObject: 'doorObj__c', field: 'house__c' }, { relationshipName: 'windows__r', childSObject: 'windowObj__c', field: 'parent__c' }]\n\t\t}\n\t};\n\n\tvar setup = function setup() {\n\t\tvar reader = new SchemaReader();\n\t\treader.completeMetas = schema;\n\t\treader.isFetching = false;\n\t\treturn reader;\n\t};\n\n\ttest(\"shallow read all objects and fields\", function (t) {\n\t\tvar reader = setup();\n\t\tvar objectNameCounts = { windowObj__c: 0, doorObj__c: 0, houseObj__c: 0 };\n\t\tvar fieldCount = 0;\n\n\t\tvar fieldsVisited = {};\n\t\tvar fieldsVisitedTwice = {};\n\n\t\treader.shallowReadFields(function (field, object, path, reader) {\n\t\t\tobjectNameCounts[object.name] += 1;\n\t\t\tif (fieldsVisited[field.name]) fieldsVisitedTwice[field.name] = true;\n\t\t\tfieldsVisited[field.name] = true;\n\t\t\tfieldCount++;\n\t\t});\n\n\t\tt.equal(objectNameCounts.windowObj__c, 4, 'windowObj__c visit count');\n\t\tt.equal(objectNameCounts.doorObj__c, 4, 'doorObj__c visit count');\n\t\tt.equal(objectNameCounts.houseObj__c, 16, 'houseObj__c visit count');\n\t\tt.equal(fieldCount, 24, 'total field visit count');\n\t\tt.deepEqual(fieldsVisitedTwice, { Id: true, Name: true }, 'fields visited multiple times');\n\n\t\tif (typeof t.end === 'function') t.end();\n\t});\n\n\ttest(\"deep read all objects and fields\", function (t) {\n\t\tvar reader = setup();\n\t\tvar objectNameCounts = { windowObj__c: 0, doorObj__c: 0, houseObj__c: 0 };\n\t\tvar fieldCount = 0;\n\n\t\tvar fieldsVisited = {};\n\t\tvar fieldsVisitedTwice = {};\n\n\t\treader.deepReadFields(function (field, object, path, reader) {\n\t\t\tobjectNameCounts[object.name] += 1;\n\t\t\tif (fieldsVisited[field.name]) fieldsVisitedTwice[field.name] = true;\n\t\t\tfieldsVisited[field.name] = true;\n\t\t\tfieldCount++;\n\t\t});\n\n\t\tt.equal(objectNameCounts.windowObj__c, 4, 'windowObj__c visit count');\n\t\tt.equal(objectNameCounts.doorObj__c, 8, 'doorObj__c visit count');\n\t\tt.equal(objectNameCounts.houseObj__c, 48, 'houseObj__c visit count');\n\t\tt.equal(fieldCount, 60, 'total field visit count');\n\t\tt.deepEqual(fieldsVisitedTwice, { Id: true,\n\t\t\tName: true,\n\t\t\tknobType__c: true,\n\t\t\thouse__c: true,\n\t\t\tisBigHouse__c: true,\n\t\t\thousePartyTime__c: true,\n\t\t\tcost__c: true,\n\t\t\treadyByDate__c: true,\n\t\t\townerContact__c: true,\n\t\t\theight__c: true,\n\t\t\taddress__c: true,\n\t\t\tcontactPhone__c: true,\n\t\t\tfloorPlan__c: true,\n\t\t\tinsurances__c: true,\n\t\t\tdescription__c: true,\n\t\t\talarmPin__c: true,\n\t\t\twebsite__c: true,\n\t\t\tfloors__c: true }, 'fields visited multiple times');\n\n\t\tif (typeof t.end === 'function') t.end();\n\t});\n\n\ttest(\"shallow read all objects and child relationships\", function (t) {\n\t\tvar reader = setup();\n\t\tvar objectNameCounts = { windowObj__c: 0, doorObj__c: 0, houseObj__c: 0 };\n\t\tvar relationshipCount = 0;\n\n\t\tvar relationsipsVisited = {};\n\t\tvar relationsipsVisitedTwice = {};\n\n\t\treader.shallowReadChildRelationships(function (rel, object, path, reader) {\n\t\t\tobjectNameCounts[object.name] += 1;\n\t\t\tif (relationsipsVisited[rel.relationshipName]) relationsipsVisitedTwice[rel.relationshipName] = true;\n\t\t\trelationsipsVisited[rel.relationshipName] = true;\n\t\t\trelationshipCount++;\n\t\t});\n\n\t\tt.equal(objectNameCounts.windowObj__c, 0, 'windowObj__c visit count');\n\t\tt.equal(objectNameCounts.doorObj__c, 1, 'doorObj__c visit count');\n\t\tt.equal(objectNameCounts.houseObj__c, 2, 'houseObj__c visit count');\n\t\tt.equal(relationshipCount, 3, 'total relationship visit count');\n\t\tt.deepEqual(relationsipsVisitedTwice, { windows__r: true }, 'relationships visited multiple times');\n\n\t\tif (typeof t.end === 'function') t.end();\n\t});\n\n\ttest(\"deep read all objects and child relationships\", function (t) {\n\t\tvar reader = setup();\n\t\tvar objectNameCounts = { windowObj__c: 0, doorObj__c: 0, houseObj__c: 0 };\n\t\tvar relationshipCount = 0;\n\n\t\tvar relationsipsVisited = {};\n\t\tvar relationsipsVisitedTwice = {};\n\n\t\treader.deepReadChildRelationships(function (rel, object, path, reader) {\n\t\t\tobjectNameCounts[object.name] += 1;\n\t\t\tif (relationsipsVisited[rel.relationshipName]) relationsipsVisitedTwice[rel.relationshipName] = true;\n\t\t\trelationsipsVisited[rel.relationshipName] = true;\n\t\t\trelationshipCount++;\n\t\t});\n\n\t\tt.equal(objectNameCounts.windowObj__c, 0, 'windowObj__c visit count');\n\t\tt.equal(objectNameCounts.doorObj__c, 2, 'doorObj__c visit count');\n\t\tt.equal(objectNameCounts.houseObj__c, 2, 'houseObj__c visit count');\n\t\tt.equal(relationshipCount, 4, 'total relationship visit count');\n\t\tt.deepEqual(relationsipsVisitedTwice, { windows__r: true }, 'relationships visited multiple times');\n\n\t\tif (typeof t.end === 'function') t.end();\n\t});\n};","\"use strict\";\n\nmodule.exports(QUnit.test, SchemaReader);"],"names":[],"mappings":"AAAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9IA;AACA;","file":"tests.js"}